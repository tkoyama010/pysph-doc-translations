# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013-2018, PySPH developers
# This file is distributed under the same license as the PySPH package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Tetsuo Koyama <tkoyama010@gmail.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PySPH 1.0b1.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-01 15:35+0000\n"
"PO-Revision-Date: 2021-11-01 15:22+0000\n"
"Last-Translator: Tetsuo Koyama <tkoyama010@gmail.com>, 2021\n"
"Language-Team: Japanese (https://www.transifex.com/getfem-doc/teams/127008/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:4
msgid "Flow past a circular cylinder using open boundary conditions"
msgstr ""

#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:6
msgid ""
"This example demonstrates the API of inlet and outlet boundary conditions in"
" PySPH. The flow past a circular cylinder is an example which uses both "
"inlet and outlet boundary conditions. To run it one may do::"
msgstr ""

#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:12
#: ../../pysph/docs/source/examples/sphere_in_vessel.rst:12
#: ../../pysph/docs/source/examples/taylor_green.rst:11
msgid ""
"There are many command line options that this example provides, check them "
"out with::"
msgstr "この例では多くのコマンドラインオプションが用意されているので、次のようにチェックしてみてください。"

#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:16
msgid ""
"In this example, we have a wind tunnel with two bounding slip walls on the "
"top and bottom of the tunnel. The inlet is on the left and the outlet is on "
"the right. In order to perform the simulation five particle arrays, "
"``solid``, ``fluid``, ``wall``, ``inlet`` and ``outlet`` are generated. "
"``fluid``, ``solid`` and ``wall`` has to solved using ``edac`` scheme, "
"whereas ``inlet`` and ``outlet`` are solved according to the equations "
"provided by the Inlet Outlet Manager (IOM). The example source can be seen "
"at `flow_past_cylinder_2d.py "
"<https://github.com/pypr/pysph/tree/master/pysph/examples/flow_past_cylinder_2d.py>`_."
msgstr ""

#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:27
#: ../../pysph/docs/source/examples/sphere_in_vessel.rst:20
msgid "This example demonstrates:"
msgstr ""

#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:29
msgid "Setting up a wind tunnel kind of simulation."
msgstr ""

#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:30
msgid "Setting up inlet and outlet boundary condition"
msgstr ""

#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:31
msgid "Force evaluation on the solid body of interest"
msgstr ""

#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:33
msgid ""
"The IOM is created in the :py:class:`Application` instance however, it is "
"passed to a :py:class:`Scheme` instance and most of its methods are called "
"in the scheme only. We discuss the implementation in the EDAC "
":py:class:`Scheme` in :ref:`iom`. The IOM has the following functions:"
msgstr ""

#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:38
msgid "Creation of ghost particle arrays"
msgstr ""

#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:39
msgid "Creation of inlet outlet stepper"
msgstr ""

#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:40
msgid "Creation of inlet outlet equations"
msgstr ""

#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:41
msgid "Creation of inlet outlet updater"
msgstr ""

#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:43
msgid "The following are discussed in detail:"
msgstr ""

#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:45
#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:53
msgid "Construction of IOM"
msgstr ""

#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:46
msgid "Passing IOM to the scheme"
msgstr ""

#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:47
#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:123
msgid "Creating ghost particles"
msgstr ""

#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:48
#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:159
msgid "Creating updater"
msgstr ""

#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:49
#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:178
msgid "Overall setup"
msgstr ""

#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:50
#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:212
msgid "Evaluating forces on solid"
msgstr ""

#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:92
msgid ""
"In the function ``_get_io_info`` the ``inlet_info`` and ``outlet_info`` are "
"created, and manager class are returned. The ``inlet_info`` and "
"``outlet_info`` info contains specific information about inlet and outlet "
"that enables IOM to create equations, stepper and updater. In "
"``_create_inlet_outlet_manager`` the IOM is created using the info objects."
msgstr ""

#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:98
msgid ""
"Note that the extra properties required by the equations are also passed by "
"the IOM."
msgstr ""

#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:101
msgid "Passing IOM to scheme"
msgstr ""

#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:118
msgid ""
"The IOM object of the application is initialized in the method "
"``configure_scheme`` of the ``Application`` class. All the post-"
"initialization method which require data from user could be called here e.g."
" ``update_dx``."
msgstr ""

#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:153
msgid ""
"The particle arrays ``ghost_inlet`` and ``ghost_outlet`` are generated by "
"the IOM depending upon the type of IOM subclass used. The properties "
":math:`uag`, :math:`uta` are the time average and velocity array in "
":math:`x` direction at t=0."
msgstr ""

#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:161
msgid ""
"The purpose of the updater is to remove particle from ``inlet`` and add them"
" to ``fluid`` whenever a particle crosses the inlet-outlet interface. "
"Similarly, it is done in case of the ``oulet``. It also adds new particle to"
" ``inlet`` as required and remove a particle from the simulation when they "
"flow past ``outlet``."
msgstr ""

#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:174
msgid ""
"the function ``create_inlet_outlet`` takes the updater ``io`` created by the"
" IOM and plugs it into the update routine of the application class "
"automatically."
msgstr ""

#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:180
msgid ""
"In order to run the simulation, the IOM object must be passed to the scheme."
" In the scheme, the IOM object must be implemented in the manner as "
"described in :ref:`iom`."
msgstr ""

#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:184
msgid ""
"A few points to note while dealing with inlet outlet boundary condition,"
msgstr ""

#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:186
msgid ""
"Construction of the IOM happens after the scheme is created with a ``void`` "
"IOM."
msgstr ""

#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:201
msgid "The IOM must be configured in the ``configure_scheme`` function."
msgstr ""

#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:203
msgid ""
"In case you change the integrator of the function, make sure the updater "
"``io`` is updating in the appropriate stage. For example, in case of a "
"``PECIntegrator`` class of integrator, the particles integrated half step in"
" stage 1 and finally advected in stage 2 then ``io`` updates the particle "
"arrays after stage 2 is complete. In case one wants to do the update in "
"stage 1 (while using another integrator) the arguments must be passed to the"
" updater appropriately."
msgstr ""

#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:214
msgid "The force on the fluid particles is evaluated using"
msgstr ""

#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:216
msgid ""
"a = \\frac{-\\nabla{p}}{\\rho} + \\nu \\nabla^{2} \\mathbf{u}\n"
"\n"
msgstr ""

#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:219
msgid ""
"In order to evaluate the forces, the ``solid`` is considered as fluid and "
"force is evaluated by solving the following equations"
msgstr ""

#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:242
msgid ""
"The equations are solved on the output saved as *.npz files. In the equation"
" ``SolidWallNoSlipBCReverse`` we are just reversing the sign of the velocity"
" difference unlike the usual equation where :math:`u - u_g` is used. The "
"total force is evaluated by multiplying the acceleration with the mass of "
"the solid particles"
msgstr ""

#: ../../pysph/docs/source/examples/flow_past_cylinder.rst:257
msgid ""
"Here, the ``au`` is acceleration due to pressure and ``auf`` is due to shear"
" stress. The force ``fx`` provides the drag force and ``fy`` provides the "
"lift force."
msgstr ""

#: ../../pysph/docs/source/examples/index.rst:4
msgid "Gallery of PySPH examples"
msgstr "PySPHの事例ギャラリー"

#: ../../pysph/docs/source/examples/index.rst:6
msgid ""
"In the following, several PySPH examples are documented. These serve to "
"illustrate various features of PySPH and show one may use PySPH to solve a "
"variety of problems."
msgstr ""
"以下では、いくつかのPySPHの例を紹介します。これらは、PySPHの様々な機能を説明し、様々な問題を解決するためにPySPHを使用することを示しています。"

#: ../../pysph/docs/source/examples/index.rst:18
msgid ":ref:`taylor_green`: the Taylor-Green Vortex problem in 2D."
msgstr ":ref:`taylor_green`: 2次元のTaylor-Green渦巻き問題。"

#: ../../pysph/docs/source/examples/index.rst:19
msgid ""
":ref:`sphere_in_vessel`: A sphere floating in a hydrostatic tank example."
msgstr ":ref:`sphere_in_vessel`: 静水タンクの中に浮かぶ球体の例。"

#: ../../pysph/docs/source/examples/index.rst:20
msgid ":ref:`flow_past_cylinder`: Flow past a circular cylinder in 2D."
msgstr ":ref:`flow_past_cylinder`: 2Dの円柱を通過する流れ。"

#: ../../pysph/docs/source/examples/sphere_in_vessel.rst:4
msgid "A rigid sphere floating in an hydrostatic tank"
msgstr ""

#: ../../pysph/docs/source/examples/sphere_in_vessel.rst:6
msgid ""
"This example demonstrates the API of running a rigid fluid coupling problem "
"in PySPH. To run it one may do::"
msgstr ""

#: ../../pysph/docs/source/examples/sphere_in_vessel.rst:16
msgid ""
"The example source can be seen at `sphere_in_vessel.py "
"<https://github.com/pypr/pysph/tree/master/pysph/examples/rigid_body/sphere_in_vessel_akinci.py>`_."
msgstr ""
"サンプルソースは `sphere_in_vessel.py "
"<https://github.com/pypr/pysph/tree/master/pysph/examples/rigid_body/sphere_in_vessel_akinci.py>`_"
" で見ることができます。"

#: ../../pysph/docs/source/examples/sphere_in_vessel.rst:22
msgid "Setting up a simulation involving rigid bodies and fluid"
msgstr ""

#: ../../pysph/docs/source/examples/sphere_in_vessel.rst:23
msgid "Discuss mainly about rigid fluid coupling"
msgstr ""

#: ../../pysph/docs/source/examples/sphere_in_vessel.rst:25
msgid "It is divided in to three parts:"
msgstr ""

#: ../../pysph/docs/source/examples/sphere_in_vessel.rst:27
#: ../../pysph/docs/source/examples/sphere_in_vessel.rst:33
msgid "Create particles"
msgstr ""

#: ../../pysph/docs/source/examples/sphere_in_vessel.rst:28
#: ../../pysph/docs/source/examples/sphere_in_vessel.rst:63
msgid "Create equations"
msgstr ""

#: ../../pysph/docs/source/examples/sphere_in_vessel.rst:29
#: ../../pysph/docs/source/examples/sphere_in_vessel.rst:154
msgid "Run the application"
msgstr ""

#: ../../pysph/docs/source/examples/sphere_in_vessel.rst:35
msgid ""
"In this example, we have a tank with a resting fluid and a sphere falling "
"into the tank. Create three particle arrays, ``tank``, ``fluid`` and "
"``cube``. ``tank`` and ``fluid`` has to obey ``wcsph`` scheme, where as "
"``cube`` has to obey rigid body equations."
msgstr ""

#: ../../pysph/docs/source/examples/sphere_in_vessel.rst:59
msgid ""
"We will discuss the reason for adding the properties :math:`fx`, :math:`fy`,"
" :math:`fz` to the ``tank`` particle array. The next step is to setup the "
"equations."
msgstr ""

#: ../../pysph/docs/source/examples/sphere_in_vessel.rst:102
msgid "A few points to note while dealing with *Akinci* formulation,"
msgstr ""

#: ../../pysph/docs/source/examples/sphere_in_vessel.rst:104
msgid ""
"As a first point, while computing the density of the ``fluid`` due to solid,"
" make sure to use ``SummationDensityBoundary``, because usual "
"``SummationDensity`` computes density by considering the mass of the "
"particle, where as ``SummationDensityBoundary`` will compute it by "
"considering the volume of the particle. This makes a lot of difference while"
" dealing with heavy density variation flows."
msgstr ""

#: ../../pysph/docs/source/examples/sphere_in_vessel.rst:111
msgid "Apply ``TaitEOSHGCorrection`` so that there is no negative pressure."
msgstr ""

#: ../../pysph/docs/source/examples/sphere_in_vessel.rst:113
msgid ""
"The force from the boundary (here it is tank) on fluid is computed using "
"``AkinciRigidFluidCoupling`` equation, but in a usual case we do it using "
"the momentum equation. There are a few advantages by doing this. If we are "
"computing the boundary force using the momentum equation, then one should "
"compute the density of the boundary, then compute the pressure. Using such "
"pressure we will compute the force. But using ``AkinciRigidFluidCoupling`` "
"we don't need to compute the pressure of the boundary because the force is "
"dependent only on the fluid particle's pressure."
msgstr ""

#: ../../pysph/docs/source/examples/sphere_in_vessel.rst:135
msgid ""
"Since in ``AkinciRigidFluidCoupling`` (more in next point) we compute both "
"force on fluid by solid particle and force on solid by fluid particle, which"
" makes our sources to hold the properties ``fx``, ``fy`` and ``fz``."
msgstr ""

#: ../../pysph/docs/source/examples/sphere_in_vessel.rst:139
msgid ""
"Here first few equations deal with the simulation of fluid in hydrostatic "
"tank. The equation dealing with rigid fluid coupling is "
"``AkinciRigidFluidCoupling`` . *Coupling* equation will deal with forces "
"exerted by fluid on solid body, and forces exerted by solid on fluid. We "
"find the force on fluid by solid and force on the solid by fluid in a singe "
"equation."
msgstr ""

#: ../../pysph/docs/source/examples/sphere_in_vessel.rst:146
msgid ""
"Usually in an SPH equation, we tend to change properties only of a "
"destination particle array, but in this case, both destination and sources "
"properties are manipulated."
msgstr ""

#: ../../pysph/docs/source/examples/sphere_in_vessel.rst:150
msgid ""
"The final equations deal with the dynamics of rigid bodies, which are "
"discussed in other example files."
msgstr ""

#: ../../pysph/docs/source/examples/sphere_in_vessel.rst:155
msgid "Finally run the application by"
msgstr ""

#: ../../pysph/docs/source/examples/taylor_green.rst:4
msgid "The Taylor-Green Vortex"
msgstr "Taylor-Green渦巻き"

#: ../../pysph/docs/source/examples/taylor_green.rst:6
msgid ""
"This example solves the classic Taylor-Green Vortex problem in two-"
"dimensions. To run it one may do::"
msgstr "この例題は、古典的なTaylor-Green Vortex問題を2次元で解きます。これを実行するには次のようにします。"

#: ../../pysph/docs/source/examples/taylor_green.rst:15
msgid ""
"The example source can be seen at `taylor_green.py "
"<https://github.com/pypr/pysph/tree/master/pysph/examples/taylor_green.py>`_."
msgstr ""

#: ../../pysph/docs/source/examples/taylor_green.rst:19
msgid "This example demonstrates several useful features:"
msgstr "この例では、いくつかの便利な機能が紹介されています。"

#: ../../pysph/docs/source/examples/taylor_green.rst:21
msgid "user defined command line arguments and how they can be used."
msgstr "ユーザー定義のコマンドライン引数とその使用方法。"

#: ../../pysph/docs/source/examples/taylor_green.rst:22
msgid "running the problem with multiple schemes."
msgstr "複数のスキームで問題を解決します。"

#: ../../pysph/docs/source/examples/taylor_green.rst:23
msgid "periodicity in both dimensions."
msgstr "両方の次元で周期性があります。"

#: ../../pysph/docs/source/examples/taylor_green.rst:24
msgid "post processing of generated data."
msgstr "生成されたデータの後処理を行います。"

#: ../../pysph/docs/source/examples/taylor_green.rst:25
msgid ""
"using the :py:class:`pysph.tools.sph_evaluator.SPHEvaluator` class for post-"
"processing."
msgstr ""
"後処理には、 :py:class:`pysph.tools.sph_evaluator.SPHEvaluator` クラスを使用しています。"

#: ../../pysph/docs/source/examples/taylor_green.rst:27
msgid "We discuss each of these below."
msgstr "以下、それぞれについて説明します。"

#: ../../pysph/docs/source/examples/taylor_green.rst:30
msgid "User command line arguments"
msgstr "ユーザーのコマンドライン引数"

#: ../../pysph/docs/source/examples/taylor_green.rst:32
msgid ""
"The user defined command line arguments are easy to add. The following code "
"snippet demonstrates how one adds this."
msgstr "ユーザー定義のコマンドライン引数は簡単に追加できます。次のコードは、その方法を示したものです。"

#: ../../pysph/docs/source/examples/taylor_green.rst:50
msgid ""
"This code is straight-forward Python code to add options using the `argparse"
" API <https://docs.python.org/3/library/argparse.html>`_. It is important to"
" note that the options are then available in the application's ``options`` "
"attribute and can be accessed as ``self.options`` from the application's "
"methods.  The ``consume_user_options`` method highlights this."
msgstr ""
"このコードは、 `argparse API <https://docs.python.org/3/library/argparse.html>`_ "
"を使用してオプションを追加する、わかりやすいPythonコードです。オプションはアプリケーションの ``options`` "
"属性に格納され、アプリケーションのメソッドから ``self.options`` としてアクセスできることに注意してください "
"``consume_user_options`` メソッドはこの点を強調しています。"

#: ../../pysph/docs/source/examples/taylor_green.rst:65
msgid ""
"This method is called after the command line arguments are passed. To "
"refresh your memory on the order of invocation of the various methods of the"
" application, see the documentation of the "
":py:class:`pysph.solver.application.Application` class. This shows that once"
" the application is run using the ``run`` method, the command line arguments"
" are parsed and the following methods are called (this means that at this "
"point, the application has a valid ``self.options``):"
msgstr ""
"このメソッドは、コマンドライン引数が渡された後に呼び出されます。アプリケーションの様々なメソッドが呼び出される順序について記憶を新たにするには、 "
":py:class:`pysph.solver.application.Application`  "
"クラスのドキュメントを参照してください。これを見ると、アプリケーションが ``run`` "
"メソッドを使って実行されると、コマンドライン引数が解析され、次のメソッドが呼び出されていることがわかります（この時点で、アプリケーションは有効な "
"``self.options`` を持っていることを意味します）。"

#: ../../pysph/docs/source/examples/taylor_green.rst:73
msgid "``consume_user_options()``"
msgstr "``consume_user_options()``"

#: ../../pysph/docs/source/examples/taylor_green.rst:74
msgid "``configure_scheme()``"
msgstr "``configure_scheme()``"

#: ../../pysph/docs/source/examples/taylor_green.rst:76
msgid ""
"The ``configure_scheme`` is important as this example allows the user to "
"change the Reynolds number which changes the viscosity as well as the "
"resolution via ``--nx`` and ``--hdx``.  The code for the configuration looks"
" like:"
msgstr ""
"この例では、レイノルズ数を変更して粘度を変えたり、 ``--nx`` や ``--hdx`` で解像度を変えたりできるので、 "
"``configure_scheme`` は重要です。 設定のためのコードは以下のようになります。"

#: ../../pysph/docs/source/examples/taylor_green.rst:94
msgid ""
"Note the use of the ``self.options.scheme`` and the use of the "
"``scheme.configure`` method. Furthermore, the method also calls the scheme's"
" ``configure_solver`` method."
msgstr ""
"``self.options.scheme`` の使用と、 ``scheme.configure`` "
"メソッドの使用法に注目してください。さらに、このメソッドはスキームの ``configure_solver`` メソッドも呼び出します。"

#: ../../pysph/docs/source/examples/taylor_green.rst:100
msgid "Using multiple schemes"
msgstr "複数のスキームの使用"

#: ../../pysph/docs/source/examples/taylor_green.rst:102
msgid ""
"This is relatively easy, this is achieved by using the "
":py:class:`pysph.sph.scheme.SchemeChooser` scheme as follows:"
msgstr ""

#: ../../pysph/docs/source/examples/taylor_green.rst:123
msgid ""
"When using multiple schemes it is important to recall that each scheme needs"
" different particle properties. The schemes set these extra properties for "
"you. In this example, the ``create_particles`` method has the following "
"code:"
msgstr ""
"複数のスキームを使用する場合、スキームごとに異なるパーティクル・プロパティが必要であることを覚えておくことが重要です。スキームはこれらの追加プロパティを設定してくれます。この例では、"
" ``create_particles`` メソッドは以下のようなコードになっています。"

#: ../../pysph/docs/source/examples/taylor_green.rst:135
msgid ""
"The line tht calls ``setup_properties`` passes a list of the particle arrays"
" to the scheme so the scheme can configure/setup any additional properties."
msgstr ""

#: ../../pysph/docs/source/examples/taylor_green.rst:140
msgid "Periodicity"
msgstr ""

#: ../../pysph/docs/source/examples/taylor_green.rst:142
msgid ""
"This is rather easily done with the code in the ``create_domain`` method:"
msgstr ""

#: ../../pysph/docs/source/examples/taylor_green.rst:152
msgid "See also :ref:`simulating_periodicity`."
msgstr ""

#: ../../pysph/docs/source/examples/taylor_green.rst:156
msgid "Post-processing"
msgstr ""

#: ../../pysph/docs/source/examples/taylor_green.rst:158
msgid ""
"The code has a significant chunk of code for post-processing the results. "
"This is in the ``post_process`` method. This demonstrates how to iterate "
"over the files and read the file data to calculate various quantities. In "
"particular it also demonstrates the use of the "
":py:class:`pysph.tools.sph_evaluator.SPHEvaluator` class. For example "
"consider the method:"
msgstr ""

#: ../../pysph/docs/source/examples/taylor_green.rst:181
msgid ""
"This code, creates the evaluator, note that it just takes the particle "
"arrays of interest, a set of equations (this can be as complex as the normal"
" SPH equations, with groups and everything), the kernel, and a domain "
"manager. The evaluator has two important methods:"
msgstr ""

#: ../../pysph/docs/source/examples/taylor_green.rst:186
msgid ""
"`update_particle_arrays(...)`: this allows a user to update the arrays to a "
"new set of values efficiently."
msgstr ""

#: ../../pysph/docs/source/examples/taylor_green.rst:188
msgid "`evaluate`: this actually performs the evaluation of the equations."
msgstr ""

#: ../../pysph/docs/source/examples/taylor_green.rst:190
msgid "The example has this code which demonstrates these:"
msgstr ""

#: ../../pysph/docs/source/examples/taylor_green.rst:201
msgid "Note the use of the above methods."
msgstr ""
