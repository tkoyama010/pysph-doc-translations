# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013-2018, PySPH developers
# This file is distributed under the same license as the PySPH package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PySPH 1.0b1.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-01 15:35+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../pysph/docs/source/using_pysph.rst:5
msgid "Using the PySPH library"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:7
msgid "In this document, we describe the fundamental data structures for working with particles in PySPH. Take a look at :ref:`tutorial` for a tutorial introduction to some of the examples. For the experienced user, take a look at :ref:`design_overview` for some of the internal code-generation details and if you want to extend PySPH for your application."
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:15
msgid "Working With Particles"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:17
msgid "As an object oriented framework for particle methods, PySPH provides convenient data structures to store and manipulate collections of particles. These can be constructed from within Python and are fully compatible with NumPy arrays. We begin with a brief description for the basic data structures for arrays."
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:27
msgid "C-arrays"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:29
msgid "The :py:class:`cyarray.carray.BaseArray` class provides a typed array data structure called **CArray**. These are used throughout PySPH and are fundamentally very similar to NumPy arrays. The following named types are supported:"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:34
msgid ":py:class:`cyarray.carray.UIntArray`    (32 bit unsigned integers)"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:35
msgid ":py:class:`cyarray.carray.IntArray`     (32 bit signed integers)"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:36
msgid ":py:class:`cyarray.carray.LongArray`    (64 bit signed integers)"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:37
msgid ":py:class:`cyarray.carray.DoubleArray`  (64 bit floating point numbers"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:39
msgid "Some simple commands to work with **BaseArrays** from the interactive shell are given below"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:57
msgid "ParticleArray"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:59
msgid "In PySPH, a collection of **BaseArrays** make up what is called a :py:class:`ParticleArray`. This is the main data structure that is used to represent particles and can be created from NumPy arrays like so:"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:71
msgid "In the above, the helper function :py:func:`pysph.base.utils.get_particle_array` will instantiate and return a :py:class:`ParticleArray` with properties `x` and `y` set from given NumPy arrays. In general, a :py:class:`ParticleArray` can be instantiated with an arbitrary number of properties. Each property is stored internally as a :py:class:`cyarray.carray.BaseArray` of the appropriate type."
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:78
msgid "By default, every :py:class:`ParticleArray` returned using the helper function will have the following properties:"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:81
msgid "`x, y, z`   : Position coordinates (doubles)"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:82
msgid "`u, v, w`   : Velocity (doubles)"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:83
msgid "`h, m, rho` : Smoothing length, mass and density (doubles)"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:84
msgid "`au, av, aw`: Accelerations (doubles)"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:85
msgid "`p`         : Pressure (doubles)"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:86
msgid "`gid`       : Unique global index (unsigned int)"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:87
msgid "`pid`       : Processor id (int)"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:88
msgid "`tag`       : Tag (int)"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:90
msgid "The role of the particle properties like positions, velocities and other variables should be clear. These define either the kinematic or dynamic properties associated with SPH particles in a simulation."
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:94
msgid "In addition to scalar properties, particle arrays also support \"strided\" properties i.e. associating multiple elements per particle.  For example::"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:100
msgid "This will add a new property with name ``'A'`` but which has 2 elements associated with each particle. When one adds/remove particles this is taken into account automatically. When accessing such a particle, one has to be careful though as the underlying array is still stored as a one-dimensional array."
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:106
msgid "PySPH introduces a global identifier for a particle which is required to be *unique* for that particle. This is represented with the property **gid** which is of type **unsigned int**. This property is used in the parallel load balancing algorithm with Zoltan."
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:111
msgid "The property **pid** for a particle is an **integer** that is used to identify the processor to which the particle is currently assigned."
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:114
msgid "The property **tag** is an **integer** that is used for any other identification. For example, we might want to mark all boundary particles with the tag 100. Using this property, we can delete all such particles as"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:123
msgid "This gives us a very flexible way to work with particles. Another way of deleting/extracting particles is by providing the indices (as a `list`, `NumPy array` or a :py:class:`LongArray`) of the particles to be removed:"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:134
msgid "A :py:class:`ParticleArray` can be concatenated with another array to result in a larger array:"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:141
msgid "To set a given list of properties to zero:"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:148
msgid "Properties in a particle array are automatically sized depending on the number of particles.  There are times when fixed size properties are required.  For example if the total mass or total force on a particle array needs to be calculated, a fixed size constant can be added.  This can be done by adding a ``constant`` to the array as illustrated below:"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:160
msgid "In the above, the ``total_mass`` is a fixed ``DoubleArray`` of length 1 and the ``total_force`` is a fixed ``DoubleArray`` of length 3.  These constants will never be resized as one adds or removes particles to/from the particle array.  The constants may be used inside of SPH equations just like any other property."
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:166
msgid "The constants can also set in the constructor of the :py:class:`ParticleArray` by passing a dictionary of constants as a ``constants`` keyword argument.  For example:"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:177
msgid "Take a look at :py:class:`ParticleArray` reference documentation for some of the other methods and their uses."
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:184
msgid "Nearest Neighbour Particle Searching (NNPS)"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:186
msgid "To carry out pairwise interactions for SPH, we need to find the nearest neighbours for a given particle within a specified interaction radius. The :py:class:`NNPS` object is responsible for handling these nearest neighbour queries for a *list* of particle arrays:"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:199
msgid "The above will create an :py:class:`NNPS` object that uses the classical *linked-list* algorithm for nearest neighbour searches. The radius of interaction is determined by the argument `radius_scale`. The book-keeping cells have a length of :math:`\\text{radius_scale} \\times h_{\\text{max}}`, where :math:`h_{\\text{max}}` is the maximum smoothing length of *all* particles assigned to the local processor."
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:206
msgid "Note that the ``NNPS`` classes also support caching the neighbors computed.  This is useful if one needs to reuse the same set of neighbors.  To enable this, simply pass ``cache=True`` to the constructor::"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:213
msgid "Since we allow a list of particle arrays, we need to distinguish between *source* and *destination* particle arrays in the neighbor queries."
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:219
msgid "A **destination** particle is a particle belonging to that species for which the neighbors are sought."
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:222
msgid "A **source** particle is a particle belonging to that species which contributes to a given destination particle."
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:225
msgid "With these definitions, we can query for nearest neighbors like so:"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:232
msgid "where `src_index`, `dst_index` and `d_idx` are integers. This will return, for the *d_idx* particle of the *dst_index* particle array (species), nearest neighbors from the *src_index* particle array (species).  Passing the `src_index` and `dst_index` every time is repetitive so an alternative API is to call ``set_context`` as done below::"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:241
msgid "If the ``NNPS`` instance is configured to use caching, then it will also pre-compute the neighbors very efficiently.  Once the context is set one can get the neighbors as::"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:247
msgid "Where `d_idx` and `nbrs` are as discussed above."
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:249
msgid "If we want to re-compute the data structure for a new distribution of particles, we can call the :py:meth:`NNPS.update` method:"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:260
msgid "Periodic domains"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:262
msgid "The constructor for the :py:class:`NNPS` accepts an optional argument (:py:class:`DomainManager`) that is used to delimit the maximum spatial extent of the simulation domain. Additionally, this argument is also used to indicate the extents for a periodic domain. We construct a :py:class:`DomainManager` object like so"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:275
msgid "where `xmin ... zmax` are floating point arguments delimiting the simulation domain and `periodic_in_x,y,z` are bools defining the periodic axes."
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:279
msgid "When the :py:class:`NNPS` object is constructed with this :py:class:`DomainManager`, care is taken to create periodic ghosts for particles in the vicinity of the periodic boundaries. These *ghost* particles are given a special **tag** defined by :py:class:`ParticleTAGS`"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:294
msgid "The *Local* tag is used to for ordinary particles assigned and owned by a given processor. This is the default tag for all particles."
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:300
msgid "The *Remote* tag is used for ordinary particles assigned to but not owned by a given processor. Particles with this tag are typically used to satisfy neighbor queries *across* processor boundaries in a parallel simulation."
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:307
msgid "The *Ghost* tag is used for particles that are created to satisfy boundary conditions locally."
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:314
msgid "Particle aligning"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:316
msgid "In PySPH, the :py:class:`ParticleArray` aligns all particles upon a call to the :py:meth:`ParticleArray.align_particles` method. The aligning is done so that all particles with the *Local* tag are placed first, followed by particles with other tags."
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:321
msgid "There is no preference given to the tags other than the fact that a particle with a non-zero tag is placed after *all* particles with a zero (*Local*) tag. Intuitively, the local particles represent *real* particles or particles that we want to do active computation on (destination particles)."
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:327
msgid "The data attribute `ParticleArray.num_real_particles` returns the number of real or *Local* particles. The total number of particles in a given :py:class:`ParticleArray` can be obtained by a call to the :py:meth:`ParticleArray.get_number_of_particles` method."
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:332
msgid "The following is a simple example demonstrating this default behaviour of PySPH:"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:359
msgid "We are now in a position to put all these ideas together and write our first SPH application."
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:367
msgid "Parallel NNPS with PyZoltan"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:369
msgid "PySPH uses the Zoltan_ data management library for dynamic load balancing through a Python wrapper :py:class:`PyZoltan`, which provides functionality for parallel neighbor queries in a manner completely analogous to :py:class:`NNPS`."
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:374
msgid "Particle data is managed and exchanged in parallel via a derivative of the abstract base class :py:class:`ParallelManager` object. Continuing with our example, we can instantiate a :py:class:`ZoltanParallelManagerGeometric` object as:"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:385
msgid "The constructor for the parallel manager is quite similar to the :py:class:`NNPS` constructor, with two additional parameters, `comm` and `lb_method`. The first is the `MPI communicator` object and the latter is the partitioning algorithm requested. The following geometric load balancing algorithms are supported:"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:391
msgid "Recursive Coordinate Bisection (RCB_)"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:392
msgid "Recursive Inertial Bisection (RIB_)"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:393
msgid "Hilbert Space Filling Curves (HSFC_)"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:395
msgid "The particle distribution can be updated in parallel by a call to the :py:meth:`ParallelManager.update` method. Particles across processor boundaries that are needed for neighbor queries are assigned the tag *Remote* as shown in the figure:"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:403
msgid "Local and remote particles in the vicinity of a processor boundary (dashed line)"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:411
msgid "Putting it together: A simple example"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:413
msgid "Now that we know how to work with particles, we will use the data structures to carry out the simplest SPH operation, namely, the estimation of particle density from a given distribution of particles."
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:417
msgid "We consider particles distributed on a uniform Cartesian lattice ( :math:`\\Delta x = \\Delta y = \\Delta`) in a doubly periodic domain :math:`[0,1]\\times[0,1]`."
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:421
msgid "The particle mass is set equal to the \"volume\" :math:`\\Delta^2` associated with each particle and the smoothing length is taken as :math:`1.3\\times \\Delta`. With this initialization, we have for the estimation for the particle density"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:426
msgid "<\\rho>_a = \\sum_{b\\in\\mathcal{N}(a)} m_b W_{ab} \\approx 1"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:430
msgid "We will use the :py:class:`CubicSpline` kernel, defined in `pysph.base.kernels` module. The code to set-up the particle distribution is given below"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:466
msgid "Notice that the particles were created with an offset of :math:`\\frac{\\Delta}{2}`. This is required since the :py:class:`NNPS` object will *box-wrap* particles near periodic boundaries."
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:471
msgid "The :py:class:`NNPS` object will create periodic ghosts for the particles along each periodic axis."
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:479
msgid "The ghost particles are assigned the `tag` value 2. For this example, periodic ghosts are created along each coordinate direction as shown in the figure."
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:485
msgid "SPH Kernels"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:487
msgid "Pairwise interactions in SPH are weighted by the kernel :math:`W_{ab}`. In PySPH, the `pysph.base.kernels` module provides a Python interface for these terms. The general definition for an SPH kernel is of the form:"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:509
msgid "The kernel is an object with two methods `kernel` and `gradient`. :math:`\\text{xij}` is the difference vector between the destination and source particle :math:`\\boldsymbol{x}_{\\text{i}} - \\boldsymbol{x}_{\\text{j}}` with :math:`\\text{rij} = \\sqrt{ \\boldsymbol{x}_{ij}^2}`. The `gradient` method accepts an additional argument that upon exit is populated with the kernel gradient values."
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:519
msgid "Density summation"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:521
msgid "In the final part of the code, we iterate over all target or destination particles and compute the density contributions from neighboring particles:"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:550
msgid "The average density computed in this manner can be verified as :math:`\\rho_{\\text{avg}} = 0.99994676895585222`."
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:555
msgid "Summary"
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:557
msgid "In this document, we introduced the most fundamental data structures in PySPH for working with particles. With these data structures, PySPH can be used as a library for managing particles for your application."
msgstr ""

#: ../../pysph/docs/source/using_pysph.rst:561
msgid "If you are interested in the PySPH framework and want to try out some examples, check out :ref:`tutorial`."
msgstr ""
